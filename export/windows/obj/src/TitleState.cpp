// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_FlxTransWindow
#include <FlxTransWindow.h>
#endif
#ifndef INCLUDED_StartEmulationState
#include <StartEmulationState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a55214e0452daa02_19_new,"TitleState","new",0x3b23deeb,"TitleState.new","TitleState.hx",19,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_25_create,"TitleState","create",0x801cc151,"TitleState.create","TitleState.hx",25,0xd132a6e5)
static const ::String _hx_array_data_8ca18d79_4[] = {
	HX_("!!! Warning !!!",fe,03,96,1a),HX_("This isn't a normal game,",d1,2f,b9,07),HX_("it's different! We tried so much to",c3,9d,d0,b0),HX_("control the dangerous scenes.",9f,15,51,e1),HX_("You should choose if you",99,55,c6,95),HX_("want to play the game or not.",50,eb,15,76),
};
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_82_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",82,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_101_update,"TitleState","update",0x8b12e05e,"TitleState.update","TitleState.hx",101,0xd132a6e5)
HX_LOCAL_STACK_FRAME(_hx_pos_a55214e0452daa02_106_interpolateColor,"TitleState","interpolateColor",0xae52a777,"TitleState.interpolateColor","TitleState.hx",106,0xd132a6e5)

void TitleState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_19_new)
HXLINE(  22)		this->defaultCamZoom = ((Float)1.05);
HXLINE(  21)		this->elapsedTime = ((Float)0);
HXLINE(  20)		this->letters = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  19)		super::__construct();
            	}

Dynamic TitleState_obj::__CreateEmpty() { return new TitleState_obj; }

void *TitleState_obj::_hx_vtable = 0;

Dynamic TitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TitleState_obj > _hx_result = new TitleState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x22c6bd01) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22c6bd01;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void TitleState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_25_create)
HXLINE(  26)		this->super::create();
HXLINE(  28)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  28)		int bg1 = ::flixel::FlxG_obj::width;
HXDLIN(  28)		int bg2 = ::flixel::FlxG_obj::height;
HXDLIN(  28)		int Alpha = 255;
HXDLIN(  28)		int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  28)		{
HXLINE(  28)			color = (color & -16711681);
HXDLIN(  28)			color = (color | 65536);
            		}
HXDLIN(  28)		{
HXLINE(  28)			color = (color & -65281);
HXDLIN(  28)			color = (color | 256);
            		}
HXDLIN(  28)		{
HXLINE(  28)			color = (color & -256);
HXDLIN(  28)			color = (color | 1);
            		}
HXDLIN(  28)		{
HXLINE(  28)			color = (color & 16777215);
HXDLIN(  28)			int color1;
HXDLIN(  28)			if ((Alpha > 255)) {
HXLINE(  28)				color1 = 255;
            			}
            			else {
HXLINE(  28)				if ((Alpha < 0)) {
HXLINE(  28)					color1 = 0;
            				}
            				else {
HXLINE(  28)					color1 = Alpha;
            				}
            			}
HXDLIN(  28)			color = (color | (color1 << 24));
            		}
HXDLIN(  28)		 ::flixel::FlxSprite bg3 = bg->makeGraphic(bg1,bg2,color,null(),null());
HXLINE(  29)		if ((this->defaultCamZoom < 1)) {
HXLINE(  31)			 ::flixel::math::FlxBasePoint this1 = bg3->scale;
HXDLIN(  31)			Float x = (( (Float)(1) ) / this->defaultCamZoom);
HXDLIN(  31)			 ::Dynamic y = null();
HXDLIN(  31)			if (::hx::IsNull( y )) {
HXLINE(  31)				y = x;
            			}
HXDLIN(  31)			this1->set_x((this1->x * x));
HXDLIN(  31)			this1->set_y((this1->y * ( (Float)(y) )));
            		}
HXLINE(  33)		{
HXLINE(  33)			 ::flixel::math::FlxBasePoint this2 = bg3->scrollFactor;
HXDLIN(  33)			this2->set_x(( (Float)(0) ));
HXDLIN(  33)			this2->set_y(( (Float)(0) ));
            		}
HXLINE(  34)		this->add(bg3);
HXLINE(  35)		::FlxTransWindow_obj::getWindowsTransparent(null());
HXLINE(  38)		this->warningMusic = ::flixel::FlxG_obj::sound->load(HX_("assets/music/toy-select-v2.wav",06,e2,ee,71),1,true,null(),null(),null(),null(),null(),null());
HXLINE(  39)		this->warningMusic->play(null(),null(),null());
HXLINE(  42)		::Array< ::String > messages = ::Array_obj< ::String >::fromData( _hx_array_data_8ca18d79_4,6);
HXLINE(  51)		Float startX;
HXLINE(  52)		Float startY = ( (Float)(400) );
HXLINE(  53)		Float letterWidth = ( (Float)(30) );
HXLINE(  54)		Float lineSpacing = ( (Float)(40) );
HXLINE(  58)		{
HXLINE(  58)			int _g = 0;
HXDLIN(  58)			int _g1 = messages->length;
HXDLIN(  58)			while((_g < _g1)){
HXLINE(  58)				_g = (_g + 1);
HXDLIN(  58)				int messageIndex = (_g - 1);
HXLINE(  59)				::String message = messages->__get(messageIndex);
HXLINE(  60)				startX = ((( (Float)(::flixel::FlxG_obj::width) ) - (( (Float)(message.length) ) * letterWidth)) / ( (Float)(2) ));
HXLINE(  63)				{
HXLINE(  63)					int _g2 = 0;
HXDLIN(  63)					int _g3 = message.length;
HXDLIN(  63)					while((_g2 < _g3)){
HXLINE(  63)						_g2 = (_g2 + 1);
HXDLIN(  63)						int i = (_g2 - 1);
HXLINE(  64)						::String _hx_char = message.charAt(i);
HXLINE(  65)						 ::flixel::text::FlxText letter =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(startX + (( (Float)(i) ) * letterWidth)),(startY + (( (Float)(messageIndex) ) * lineSpacing)),letterWidth,_hx_char,null(),null());
HXLINE(  67)						int startColor = 16711680;
HXLINE(  68)						int endColor = 3801088;
HXLINE(  69)						Float ratio = ::Math_obj::min(::Math_obj::max((( (Float)(i) ) / ( (Float)(message.length) )),( (Float)(0) )),( (Float)(1) ));
HXLINE(  70)						int color2 = this->interpolateColor(startColor,endColor,ratio);
HXLINE(  72)						letter->setFormat(HX_("assets/fonts/sonic-2-title-card-font.ttf",1c,53,78,3a),64,color2,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  73)						this->add(letter);
HXLINE(  75)						this->letters->push(letter);
            					}
            				}
            			}
            		}
            	}


void TitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_82_update)
HXLINE(  83)		this->super::update(elapsed);
HXLINE(  86)		 ::TitleState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  86)		_hx_tmp->elapsedTime = (_hx_tmp->elapsedTime + elapsed);
HXLINE(  89)		{
HXLINE(  89)			int _g = 0;
HXDLIN(  89)			int _g1 = this->letters->length;
HXDLIN(  89)			while((_g < _g1)){
HXLINE(  89)				_g = (_g + 1);
HXDLIN(  89)				int i = (_g - 1);
HXLINE(  90)				 ::flixel::text::FlxText letter = this->letters->__get(i).StaticCast<  ::flixel::text::FlxText >();
HXLINE(  91)				letter->set_y((letter->y + (::Math_obj::sin(((this->elapsedTime * ( (Float)(5) )) + (( (Float)(i) ) * ((Float)0.1)))) * ((Float)0.5))));
            			}
            		}
HXLINE(  96)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  96)		if (_this->keyManager->checkStatusUnsafe(13,_this->status)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer1){
            				HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_101_update)
HXLINE( 101)				 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::StartEmulationState_obj::__alloc( HX_CTX ));
HXDLIN( 101)				 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 101)				bool _hx_tmp;
HXDLIN( 101)				if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 101)					_hx_tmp = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            				}
            				else {
HXLINE( 101)					_hx_tmp = true;
            				}
HXDLIN( 101)				if (_hx_tmp) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_a55214e0452daa02_101_update)
HXLINE( 101)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 101)							::flixel::FlxG_obj::game->_nextState = nextState;
            						}
            						else {
HXLINE( 101)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 101)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  97)			::flixel::FlxG_obj::camera->fade(-16777216,1,false,null(),null());
HXLINE(  98)			{
HXLINE(  98)				 ::flixel::sound::FlxSound _this1 = this->warningMusic;
HXDLIN(  98)				 ::Dynamic onComplete = null();
HXDLIN(  98)				if (::hx::IsNotNull( _this1->fadeTween )) {
HXLINE(  98)					_this1->fadeTween->cancel();
            				}
HXDLIN(  98)				_this1->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this1->_volume,( (Float)(0) ),2, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this1->volumeTween_dyn());
            			}
HXLINE(  99)			 ::flixel::util::FlxTimer timer1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE( 100)			timer1->start(3, ::Dynamic(new _hx_Closure_1()),null());
            		}
            	}


int TitleState_obj::interpolateColor(int startColor,int endColor,Float ratio){
            	HX_STACKFRAME(&_hx_pos_a55214e0452daa02_106_interpolateColor)
HXLINE( 107)		int rStart = ((startColor >> 16) & 255);
HXLINE( 108)		int gStart = ((startColor >> 8) & 255);
HXLINE( 109)		int bStart = (startColor & 255);
HXLINE( 111)		int rEnd = ((endColor >> 16) & 255);
HXLINE( 112)		int gEnd = ((endColor >> 8) & 255);
HXLINE( 113)		int bEnd = (endColor & 255);
HXLINE( 115)		int r = ::Std_obj::_hx_int((rStart + (( (Float)((rEnd - rStart)) ) * ratio)));
HXLINE( 116)		int g = ::Std_obj::_hx_int((gStart + (( (Float)((gEnd - gStart)) ) * ratio)));
HXLINE( 117)		int b = ::Std_obj::_hx_int((bStart + (( (Float)((bEnd - bStart)) ) * ratio)));
HXLINE( 119)		return (((r << 16) | (g << 8)) | b);
            	}


HX_DEFINE_DYNAMIC_FUNC3(TitleState_obj,interpolateColor,return )


::hx::ObjectPtr< TitleState_obj > TitleState_obj::__new() {
	::hx::ObjectPtr< TitleState_obj > __this = new TitleState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TitleState_obj > TitleState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TitleState_obj *__this = (TitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TitleState_obj), true, "TitleState"));
	*(void **)__this = TitleState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TitleState_obj::TitleState_obj()
{
}

void TitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TitleState);
	HX_MARK_MEMBER_NAME(letters,"letters");
	HX_MARK_MEMBER_NAME(elapsedTime,"elapsedTime");
	HX_MARK_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_MARK_MEMBER_NAME(warningMusic,"warningMusic");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(letters,"letters");
	HX_VISIT_MEMBER_NAME(elapsedTime,"elapsedTime");
	HX_VISIT_MEMBER_NAME(defaultCamZoom,"defaultCamZoom");
	HX_VISIT_MEMBER_NAME(warningMusic,"warningMusic");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val TitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"letters") ) { return ::hx::Val( letters ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { return ::hx::Val( elapsedTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warningMusic") ) { return ::hx::Val( warningMusic ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { return ::hx::Val( defaultCamZoom ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"interpolateColor") ) { return ::hx::Val( interpolateColor_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"letters") ) { letters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"elapsedTime") ) { elapsedTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"warningMusic") ) { warningMusic=inValue.Cast<  ::flixel::sound::FlxSound >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultCamZoom") ) { defaultCamZoom=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("letters",cd,9c,8e,04));
	outFields->push(HX_("elapsedTime",69,5e,cd,c6));
	outFields->push(HX_("defaultCamZoom",01,50,2a,0b));
	outFields->push(HX_("warningMusic",a9,58,5b,cf));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TitleState_obj,letters),HX_("letters",cd,9c,8e,04)},
	{::hx::fsFloat,(int)offsetof(TitleState_obj,elapsedTime),HX_("elapsedTime",69,5e,cd,c6)},
	{::hx::fsFloat,(int)offsetof(TitleState_obj,defaultCamZoom),HX_("defaultCamZoom",01,50,2a,0b)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(int)offsetof(TitleState_obj,warningMusic),HX_("warningMusic",a9,58,5b,cf)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TitleState_obj_sStaticStorageInfo = 0;
#endif

static ::String TitleState_obj_sMemberFields[] = {
	HX_("letters",cd,9c,8e,04),
	HX_("elapsedTime",69,5e,cd,c6),
	HX_("defaultCamZoom",01,50,2a,0b),
	HX_("warningMusic",a9,58,5b,cf),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("interpolateColor",e2,30,77,3c),
	::String(null()) };

::hx::Class TitleState_obj::__mClass;

void TitleState_obj::__register()
{
	TitleState_obj _hx_dummy;
	TitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("TitleState",79,8d,a1,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TitleState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

